#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StressdetectionViaFace
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StressDetection")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertData(Data instance);
    partial void UpdateData(Data instance);
    partial void DeleteData(Data instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::StressdetectionViaFace.Properties.Settings.Default.StressDetectionConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Data> Datas
		{
			get
			{
				return this.GetTable<Data>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Data")]
	public partial class Data : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FileLocation;
		
		private System.Nullable<int> _Class;
		
		private string _LBPHistogram;
		
		private string _AMLBPHistogram;
		
		private string _ADLBP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileLocationChanging(string value);
    partial void OnFileLocationChanged();
    partial void OnClassChanging(System.Nullable<int> value);
    partial void OnClassChanged();
    partial void OnLBPHistogramChanging(string value);
    partial void OnLBPHistogramChanged();
    partial void OnAMLBPHistogramChanging(string value);
    partial void OnAMLBPHistogramChanged();
    partial void OnADLBPChanging(string value);
    partial void OnADLBPChanged();
    #endregion
		
		public Data()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileLocation", DbType="VarChar(MAX)")]
		public string FileLocation
		{
			get
			{
				return this._FileLocation;
			}
			set
			{
				if ((this._FileLocation != value))
				{
					this.OnFileLocationChanging(value);
					this.SendPropertyChanging();
					this._FileLocation = value;
					this.SendPropertyChanged("FileLocation");
					this.OnFileLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="Int")]
		public System.Nullable<int> Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LBPHistogram", DbType="VarChar(MAX)")]
		public string LBPHistogram
		{
			get
			{
				return this._LBPHistogram;
			}
			set
			{
				if ((this._LBPHistogram != value))
				{
					this.OnLBPHistogramChanging(value);
					this.SendPropertyChanging();
					this._LBPHistogram = value;
					this.SendPropertyChanged("LBPHistogram");
					this.OnLBPHistogramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMLBPHistogram", DbType="VarChar(MAX)")]
		public string AMLBPHistogram
		{
			get
			{
				return this._AMLBPHistogram;
			}
			set
			{
				if ((this._AMLBPHistogram != value))
				{
					this.OnAMLBPHistogramChanging(value);
					this.SendPropertyChanging();
					this._AMLBPHistogram = value;
					this.SendPropertyChanged("AMLBPHistogram");
					this.OnAMLBPHistogramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADLBP", DbType="VarChar(MAX)")]
		public string ADLBP
		{
			get
			{
				return this._ADLBP;
			}
			set
			{
				if ((this._ADLBP != value))
				{
					this.OnADLBPChanging(value);
					this.SendPropertyChanging();
					this._ADLBP = value;
					this.SendPropertyChanged("ADLBP");
					this.OnADLBPChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
