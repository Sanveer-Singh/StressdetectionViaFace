#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StressdetectionViaFace
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HYPKNN")]
	public partial class HYPKNNDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPipeline(Pipeline instance);
    partial void UpdatePipeline(Pipeline instance);
    partial void DeletePipeline(Pipeline instance);
    #endregion
		
		public HYPKNNDataContext() : 
				base(global::StressdetectionViaFace.Properties.Settings.Default.HYPKNNConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HYPKNNDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HYPKNNDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HYPKNNDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HYPKNNDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Pipeline> Pipelines
		{
			get
			{
				return this.GetTable<Pipeline>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pipelines")]
	public partial class Pipeline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _lOCATION;
		
		private string _NAME;
		
		private string _LABEL;
		
		private string _LBPpattern;
		
		private string _LBPpredicted;
		
		private string _NILBPpattern;
		
		private string _NILBPpredicted;
		
		private string _CONCATpattern;
		
		private string _CONCATpredicted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnlOCATIONChanging(string value);
    partial void OnlOCATIONChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnLABELChanging(string value);
    partial void OnLABELChanged();
    partial void OnLBPpatternChanging(string value);
    partial void OnLBPpatternChanged();
    partial void OnLBPpredictedChanging(string value);
    partial void OnLBPpredictedChanged();
    partial void OnNILBPpatternChanging(string value);
    partial void OnNILBPpatternChanged();
    partial void OnNILBPpredictedChanging(string value);
    partial void OnNILBPpredictedChanged();
    partial void OnCONCATpatternChanging(string value);
    partial void OnCONCATpatternChanged();
    partial void OnCONCATpredictedChanging(string value);
    partial void OnCONCATpredictedChanged();
    #endregion
		
		public Pipeline()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lOCATION", DbType="VarChar(MAX)")]
		public string lOCATION
		{
			get
			{
				return this._lOCATION;
			}
			set
			{
				if ((this._lOCATION != value))
				{
					this.OnlOCATIONChanging(value);
					this.SendPropertyChanging();
					this._lOCATION = value;
					this.SendPropertyChanged("lOCATION");
					this.OnlOCATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="VarChar(MAX)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LABEL", DbType="VarChar(MAX)")]
		public string LABEL
		{
			get
			{
				return this._LABEL;
			}
			set
			{
				if ((this._LABEL != value))
				{
					this.OnLABELChanging(value);
					this.SendPropertyChanging();
					this._LABEL = value;
					this.SendPropertyChanged("LABEL");
					this.OnLABELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LBPpattern", DbType="VarChar(MAX)")]
		public string LBPpattern
		{
			get
			{
				return this._LBPpattern;
			}
			set
			{
				if ((this._LBPpattern != value))
				{
					this.OnLBPpatternChanging(value);
					this.SendPropertyChanging();
					this._LBPpattern = value;
					this.SendPropertyChanged("LBPpattern");
					this.OnLBPpatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LBPpredicted", DbType="VarChar(MAX)")]
		public string LBPpredicted
		{
			get
			{
				return this._LBPpredicted;
			}
			set
			{
				if ((this._LBPpredicted != value))
				{
					this.OnLBPpredictedChanging(value);
					this.SendPropertyChanging();
					this._LBPpredicted = value;
					this.SendPropertyChanged("LBPpredicted");
					this.OnLBPpredictedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NILBPpattern", DbType="VarChar(MAX)")]
		public string NILBPpattern
		{
			get
			{
				return this._NILBPpattern;
			}
			set
			{
				if ((this._NILBPpattern != value))
				{
					this.OnNILBPpatternChanging(value);
					this.SendPropertyChanging();
					this._NILBPpattern = value;
					this.SendPropertyChanged("NILBPpattern");
					this.OnNILBPpatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NILBPpredicted", DbType="VarChar(MAX)")]
		public string NILBPpredicted
		{
			get
			{
				return this._NILBPpredicted;
			}
			set
			{
				if ((this._NILBPpredicted != value))
				{
					this.OnNILBPpredictedChanging(value);
					this.SendPropertyChanging();
					this._NILBPpredicted = value;
					this.SendPropertyChanged("NILBPpredicted");
					this.OnNILBPpredictedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONCATpattern", DbType="VarChar(MAX)")]
		public string CONCATpattern
		{
			get
			{
				return this._CONCATpattern;
			}
			set
			{
				if ((this._CONCATpattern != value))
				{
					this.OnCONCATpatternChanging(value);
					this.SendPropertyChanging();
					this._CONCATpattern = value;
					this.SendPropertyChanged("CONCATpattern");
					this.OnCONCATpatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONCATpredicted", DbType="VarChar(MAX)")]
		public string CONCATpredicted
		{
			get
			{
				return this._CONCATpredicted;
			}
			set
			{
				if ((this._CONCATpredicted != value))
				{
					this.OnCONCATpredictedChanging(value);
					this.SendPropertyChanging();
					this._CONCATpredicted = value;
					this.SendPropertyChanged("CONCATpredicted");
					this.OnCONCATpredictedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
